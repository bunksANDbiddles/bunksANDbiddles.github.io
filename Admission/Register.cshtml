@{
    Layout = "~/Shared/Layouts/_InquireLayout.cshtml";
    Page.Title = "Register";

    var db = Database.Open("BunksWebsite");
    var sqlSelectEmail = "SELECT * FROM Inquiries";
    var email = "";
    var password1 = "";
    var password2 = "";

    if(IsPost)
    {
        WebSecurity.Logout();

   
        email = Request["email"];
        password1 = Request["password1"];
        password2 = Request["password2"];

        // validation
            if (email.IsEmpty()){
                ModelState.AddError("email", "Email Address is required.");
            }

            if (!MyValidation.IsValidEmail(email))         
           {             
                ModelState.AddError("email", "Invalid Email Address. Contact the Administrator");         
            } 

        


             if (password1.IsEmpty()) 
             {             
                 ModelState.AddError("password1", "Password is required.");         
             }  

             if(WebSecurity.UserExists(email))         
             {             
                 ModelState.AddError("email", "An account with this name already exists.");         
              } 
               
              if(password1 != password2)         
              {             
                  ModelState.AddError("password1", "The passwords do not match.");         
              }

              // Create Account
              if(ModelState.IsValid)
              {
                  WebSecurity.CreateUserAndAccount(email, password1, null, false);
                  WebSecurity.Login(email, password1);
                  if (Request.QueryString["sender"] != null )
                  {
                      // Return supervisor to the URL sent in the "sender" key of the QueryString
                      Response.Redirect(Request.QueryString["sender"]);
                  }
                  else
                  {
                      // Return the supervisor to the home page
                      Response.Redirect("~/Default");
                  }
              }

        
    }
}



                  
  
  
         


       

                                

                                	 
                                        <h1 class="win-type-header" > 
                                            Register an account here.<span style="color: #080606 ;"></span>
                                        </h1>

                                        <div class="box">
    <div data-win-control="WinJS.UI.AutoSuggestBox" data-win-options="{
        placeholderText: 'Type a city',
        onsuggestionsrequested: Sample.suggestionsRequestedHandler,
        onquerysubmitted: Sample.querySubmittedHandler
    }"></div>
    <br/>
    <div class="win-type-body" id="statusEl">Queries submitted:<br /></div>


                                              <div id="result"></div>
</div>
		
		
							 



<style>
    .win-autosuggestbox {
	margin:15px 0px;
}
</style>



    
    


  
     <script type="text/javascript">

          $( function ()(
    
     @foreach ( var emailID in db.Query(sqlSelectEmail) )
      {

       @: suggestionList.push(@emailID.Email);
      


      }
    })();
      
    </script>

<script>
 
</script>
<script type="text/javascript">


      var stringArr = [];
        stringArr.push("emarakha@bunks.com");
        stringArr.push("New York City");
        stringArr.push("Nairobi");
        stringArr.push("Karachi");

        var index = stringArr.length;
        while (index-- > 0) {
            stringArr[index] = WinJS.Binding.as(stringArr[index]);
        }

        var stringList = new WinJS.Binding.List(stringArr, {binding: true, proxy: false});

        index = stringArr.length;
        while (index-- > 0) {
            var div = document.getElementById("result");
            div.textContent += stringList.getAt(index);
        }

    var statusEl = document.getElementById("status");
var suggestionList = [ "emarakha@bunks.com", "Istanbul", "Karachi", "Delhi", "Mumbai", "Moscow", "Seoul", "Beijing", "Jakarta",
    "Tokyo", "Mexico City", "Kinshasa", "New York City", "Lagos", "London", "Lima", "Bogota", "Tehran", "Ho Chi Minh City", "Hong Kong",
    "Bangkok", "Dhaka", "Cairo", "Hanoi", "Rio de Janeiro", "Lahore", "Chonquing", "Bengaluru", "Tianjin", "Baghdad", "Riyadh", "Singapore",
    "Santiago", "Saint Petersburg", "Surat", "Chennai", "Kolkata", "Yangon", "Guangzhou", "Alexandria", "Shenyang", "Hyderabad", "Ahmedabad",
    "Ankara", "Johannesburg", "Wuhan", "Los Angeles", "Yokohama", "Abidjan", "Busan", "Cape Town", "Durban", "Pune", "Jeddah", "Berlin",
    "Pyongyang", "Kanpur", "Madrid", "Jaipur", "Nairobi", "Chicago", "Houston", "Philadelphia", "Phoenix", "San Antonio", "San Diego",
    "Dallas", "San Jose", "Jacksonville", "Indianapolis", "San Francisco", "Austin", "Columbus", "Fort Worth", "Charlotte", "Detroit",
    "El Paso", "Memphis", "Baltimore", "Boston", "Seattle Washington", "Nashville", "Denver", "Louisville", "Milwaukee", "Portland",
    "Las Vegas", "Oklahoma City", "Albuquerque", "Tucson", "Fresno", "Sacramento", "Long Beach", "Kansas City", "Mesa", "Virginia Beach",
    "Atlanta", "Colorado Springs", "Omaha", "Raleigh", "Miami", "Cleveland", "Tulsa", "Oakland", "Minneapolis", "Wichita", "Arlington",
    "Bakersfield", "New Orleans", "Honolulu", "Anaheim", "Tampa", "Aurora", "Santa Ana", "St. Louis", "Pittsburgh", "Corpus Christi",
    "Riverside", "Cincinnati", "Lexington", "Anchorage", "Stockton", "Toledo", "St. Paul", "Newark", "Greensboro", "Buffalo", "Plano",
    "Lincoln", "Henderson", "Fort Wayne", "Jersey City", "St. Petersburg", "Chula Vista", "Norfolk", "Orlando", "Chandler", "Laredo", "Madison",
    "Winston-Salem", "Lubbock", "Baton Rouge", "Durham", "Garland", "Glendale", "Reno", "Hialeah", "Chesapeake", "Scottsdale", "North Las Vegas",
    "Irving", "Fremont", "Irvine", "Birmingham", "Rochester", "San Bernardino", "Spokane", "Toronto", "Montreal", "Vancouver", "Ottawa-Gatineau",
    "Calgary", "Edmonton", "Quebec City", "Winnipeg", "Hamilton"];



function suggestionsRequestedHandler(eventObject) {
    var queryText = eventObject.detail.queryText,
    query = queryText.toLowerCase(),
    suggestionCollection = eventObject.detail.searchSuggestionCollection;
    if (queryText.length > 0) {
        for (var i = 0, len = suggestionList.length; i < len; i++) {
            if (suggestionList[i].substr(0, query.length).toLowerCase() === query) {
                suggestionCollection.appendQuerySuggestion(suggestionList[i]);
            }
        }
    }
}

function querySubmittedHandler(eventObject) {
    var queryText = eventObject.detail.queryText;
    WinJS.log && WinJS.log(queryText, "sample", "status");
}

WinJS.log = function (msg, source, type) {
    if (type === "status") {
        document.getElementById("statusEl").innerHTML += msg + "<br/>";
    }
}

WinJS.Namespace.define("Sample", {
    suggestionsRequestedHandler: WinJS.UI.eventHandler(suggestionsRequestedHandler),
    querySubmittedHandler: WinJS.UI.eventHandler(querySubmittedHandler)
});

WinJS.UI.processAll();


</script>


 
     



	

             	
	


